# Chapter 7: Arranging Movie Cards in a Grid Layout with CSS Flexbox

In this chapter, we will focus on arranging the movie cards in a grid layout using CSS Flexbox. By applying flexbox properties to the container element, we can create a responsive and visually appealing movie showcase that adapts to different screen sizes.

## Step 1: Open the `layout.css` File

Inside the `styles` directory, locate the `layout.css` file. This file will contain the CSS styles for the movie cards grid layout.

## Step 2: Style the Movie Cards Grid

Open the `layout.css` file in a text editor and add the following CSS code:

```css
#movie-list {
 display: flex;
 flex-wrap: wrap;
 justify-content: center;
 gap: 20px;
 padding: 20px;
}
```

Let's break down the CSS code:

- `#movie-list`: This ID selector targets the container element with the ID "movie-list". We apply the following styles:
  - `display: flex;` to create a flex container, allowing the movie cards to be laid out as flex items.
  - `flex-wrap: wrap;` to allow the movie cards to wrap to the next line if there isn't enough space horizontally.
  - `justify-content: center;` to center the movie cards horizontally within the container.
  - `gap: 20px;` to add a gap of 20 pixels between the movie cards, both horizontally and vertically.
  - `padding: 20px;` to add some padding around the movie cards grid.

## Step 3: Link the CSS File

Make sure the `layout.css` file is properly linked in the `index.html` file. Open the `index.html` file and ensure the following line is present in the `<head>` section:

```html
<link rel="stylesheet" href="styles/layout.css">
```

## Step 4: Test the Grid Layout

Save the `layout.css` file and refresh the `index.html` page in your web browser. You should now see the movie cards arranged in a grid layout, with equal spacing between them.

## Explanation

In this chapter, we used CSS Flexbox to arrange the movie cards in a grid layout. By applying flexbox properties to the container element (`#movie-list`), we created a flexible and responsive layout for the movie showcase.

The `display: flex;` property turns the container into a flex container, allowing its child elements (the movie cards) to be positioned and sized according to flexbox rules.

The `flex-wrap: wrap;` property allows the movie cards to wrap to the next line if there isn't enough horizontal space to accommodate all of them in a single row. This ensures that the movie cards are displayed in a grid-like manner, adapting to the available width of the container.

The `justify-content: center;` property centers the movie cards horizontally within the container, creating an evenly spaced distribution.

The `gap: 20px;` property adds a consistent gap of 20 pixels between the movie cards, both horizontally and vertically. This creates a visually pleasing spacing between the cards without the need for individual margins.

The `padding: 20px;` property adds some padding around the movie cards grid, providing some space between the container's edges and the movie cards.

By combining these flexbox properties, we achieve a responsive and visually appealing grid layout for the movie showcase. The movie cards will automatically adjust their positions and wrapping based on the available space, creating a dynamic and user-friendly layout.

Feel free to experiment with different flexbox properties and values to customize the grid layout according to your design preferences. You can adjust the gap size, change the justification, or add additional styling to further enhance the visual presentation of the movie showcase.

## Conclusion

Congratulations! You have successfully styled the movie cards and arranged them in a grid layout using CSS Flexbox. The movie showcase now has an attractive and responsive design that adapts to different screen sizes.

Throughout this chapter, we learned how to:

- Apply flexbox properties to the container element to create a flex container.
- Use `flex-wrap: wrap;` to allow movie cards to wrap to the next line when necessary.
- Center the movie cards horizontally using `justify-content: center;`.
- Add consistent spacing between movie cards using the `gap` property.
- Provide padding around the movie cards grid for visual spacing.

With these techniques, you can create visually appealing and responsive layouts for various components of your web application.

In the upcoming chapters, we will explore additional features and enhancements to make our movie showcase even more interactive and user-friendly.